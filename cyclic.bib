% !TEX root = main.tex


@article{ARIOLA1997154,
title = {Lambda Calculus with Explicit Recursion},
journal = {Information and Computation},
volume = {139},
number = {2},
pages = {154-233},
year = {1997},
issn = {0890-5401},
doi = {https://doi.org/10.1006/inco.1997.2651},
url = {https://www.sciencedirect.com/science/article/pii/S0890540197926511},
author = {Zena M. Ariola and Jan Willem Klop}
}

@InProceedings{10.1007/BFb0014548,
author = {Zena M. Ariola and Stefan Blom},
editor = {Mart{\'i}n Abadi and Takayasu Ito},
title = {Cyclic lambda calculi},
booktitle = {Theoretical Aspects of Computer Software},
year = {1997},
publisher = {Springer Berlin Heidelberg},
address = {Berlin, Heidelberg},
pages = {77--106},
isbn = {978-3-540-69530-1}
}


@article{KENNAWAY199793,
title = {Infinitary lambda calculus},
journal = {Theoretical Computer Science},
volume = {175},
number = {1},
pages = {93-125},
year = {1997},
issn = {0304-3975},
doi = {https://doi.org/10.1016/S0304-3975(96)00171-5},
url = {https://www.sciencedirect.com/science/article/pii/S0304397596001715},
author = {J.R. Kennaway and Jan Willem Klop and M.R. Sleep and F.J. {de Vries}}
}

%ARXIV
@misc{Letrec,
 title = {Expressibility in the Lambda Calculus with Letrec},
 author = {Clemens Grabmayer and Jan Rochel},
 year = {2013},
 doi = {10.48550/arXiv.1208.2383},
 url = {https://arxiv.org/abs/1208.2383}
}

%ARXIV
@misc{Letmu,
 title = {Expressibility in the Lambda Calculus with mu},
 author = {Clemens Grabmayer and Jan Rochel},
 year = {2013},
 doi = {10.48550/arXiv.1304.6284},
 url = {https://arxiv.org/abs/1304.6284}
}

@phdthesis{JanRochelPhd2016,
 title = {Unfolding Semantics of the Untyped lambda-Calculus with letrec},
 author = {Jan Rochel},
 year = {2016},
 url ={https://arxiv.org/abs/1610.05954},
 school = {Universiteit Utrecht},
 type = {PhD thesis}
}

@string{springer = "Springer"}
@string{entcs = "ENTCS"}
@string{elsevier= "Elsevier"}
@string{lncs="LNCS"}
@STRING{icalp   = "ICALP" }
@string{KEIO="Keio University"}

@article{2021-Kuperberg-Pinault-Pous,
 author = {Denis Kuperberg and Laureline Pinault and Damien Pous},
 title = {Cyclic proofs, system {T}, and the power of contraction},
 journal = {Proceedings of the ACM on Programming Languages, 2021},
 doi = {10.1145/3434282},
 url = {https://hal.science/hal-02487175v2/document},
 year = {2021}
 }
  
@article{2021-Anupam-Das,
 author = {Anupam Das},
 title = {A circular version of G{\"{o}}del's {T} and its abstraction complexity},
 journal = {CoRR},
 volume = {abs/2012.14421},
 year = {2020},
 url = {https://arxiv.org/abs/2012.14421},
 eprinttype = {arXiv},
}
  

@article{BrotherstonSimpson2011,
 author = {James Brotherston and Alex Simpson},
 title = {Sequent calculi for induction and infinite descent},
 journal = {J. Log. Comput.},
 volume = {21},
 number = {6},
 pages = {1177--1216},
 year = {2011},
 url = {https://doi.org/10.1093/logcom/exq052},
 doi = {10.1093/LOGCOM/EXQ052},
 timestamp = {Wed, 17 May 2017 14:25:55 +0200},
 biburl = {https://dblp.org/rec/journals/logcom/BrotherstonS11.bib},
 bibsource = {dblp computer science bibliography, https://dblp.org}
}

@phdthesis{BrotherstonPhd2006,
 title = {Sequent calculus proof systems for inductive definitions},
 author = {James Brotherston},
 year = {2006},
 address = {Laboratory for Foundations of Computer Science},
 url ={https://era.ed.ac.uk/bitstream/handle/1842/1458/brotherston\%20thesis.pdf?sequence=1&isAllowed=y},
 school = {University of Edinburgh},
 type = {PhD thesis}
}

@article{GoedelSystemT,
 author = {Gilles Dowek},
 title = {G\"{o}del’s system {T} as a precursor of modern type theory},
 year = {2006},
 url = {https://inria.hal.science/hal-04046289/file/godel.pdf}
}

@inproceedings{SCT,
 author = {Chin Soon Lee and Neil D. Jones and Amir M. Ben{-}Amram},
 editor = {Chris Hankin and Dave Schmidt},
 title = {The size-change principle for program termination},
 booktitle = {Conference Record of {POPL} 2001: The 28th {ACM} {SIGPLAN-SIGACT} Symposium on Principles of Programming Languages, London, UK, January 17-19, 2001},
 pages = {81--92},
 publisher = {{ACM}},
 year = {2001},
 url = {https://doi.org/10.1145/360204.360210},
 doi = {10.1145/360204.360210},
 timestamp = {Wed, 07 Jul 2021 17:30:33 +0200},
 biburl = {https://dblp.org/rec/conf/popl/LeeJB01.bib},
 bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/fscd/000221,
 author = {Anupam Das},
 editor = {Naoki Kobayashi},
 title = {On the Logical Strength of Confluence and Normalisation for Cyclic Proofs},
 booktitle = {6th International Conference on Formal Structures for Computation and Deduction, {FSCD} 2021, July 17-24, 2021, Buenos Aires, Argentina (Virtual Conference)},
 series = {LIPIcs},
 volume = {195},
 pages = {29:1--29:23},
 publisher = {Schloss Dagstuhl - Leibniz-Zentrum f{\"{u}}r Informatik},
 year = {2021},
 url = {https://doi.org/10.4230/LIPIcs.FSCD.2021.29},
 doi = {10.4230/LIPICS.FSCD.2021.29},
 timestamp = {Wed, 21 Aug 2024 22:46:00 +0200},
 biburl = {https://dblp.org/rec/conf/fscd/000221.bib},
 bibsource = {dblp computer science bibliography, https://dblp.org}
}


@inproceedings{DBLP:conf/lics/Curzi022,
 author       = {Gianluca Curzi and Anupam Das},
 editor       = {Christel Baier and Dana Fisman},
 title        = {Cyclic Implicit Complexity},
 booktitle    = {{LICS} '22: 37th Annual {ACM/IEEE} Symposium on Logic in Computer Science, Haifa, Israel, August 2 - 5, 2022},
 pages        = {19:1--19:13},
 publisher    = {{ACM}},
 year         = {2022},
 url          = {https://doi.org/10.1145/3531130.3533340},
 doi          = {10.1145/3531130.3533340},
 timestamp    = {Sun, 19 Jan 2025 13:30:31 +0100},
 biburl       = {https://dblp.org/rec/conf/lics/Curzi022.bib},
 bibsource    = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/csl/Curzi023,
 author = {Gianluca Curzi and Anupam Das},
 editor = {Bartek Klin and Elaine Pimentel},
 title = {Non-Uniform Complexity via Non-Wellfounded Proofs},
 booktitle = {31st {EACSL} Annual Conference on Computer Science Logic, {CSL} 2023, February 13-16, 2023, Warsaw, Poland},
 series = {LIPIcs},
 volume = {252},
 pages = {16:1--16:18},
 publisher = {Schloss Dagstuhl - Leibniz-Zentrum f{\"{u}}r Informatik},
 year = {2023},
 url = {https://doi.org/10.4230/LIPIcs.CSL.2023.16},
 doi = {10.4230/LIPICS.CSL.2023.16},
 timestamp = {Wed, 21 Aug 2024 22:46:00 +0200},
 biburl = {https://dblp.org/rec/conf/csl/Curzi023.bib},
 bibsource = {dblp computer science bibliography, https://dblp.org}
}

@inproceedings{DBLP:conf/lics/Curzi023,
 author = {Gianluca Curzi and Anupam Das},
 title = {Computational expressivity of (circular) proofs with fixed points},
 booktitle = {38th Annual {ACM/IEEE} Symposium on Logic in Computer Science, {LICS} 2023, Boston, MA, USA, June 26-29, 2023},
 pages = {1--13},
 publisher = {{IEEE}},
 year = {2023},
 url = {https://doi.org/10.1109/LICS56636.2023.10175772},
 doi = {10.1109/LICS56636.2023.10175772},
 timestamp = {Wed, 29 May 2024 16:05:22 +0200},
 biburl = {https://dblp.org/rec/conf/lics/Curzi023.bib},
 bibsource = {dblp computer science bibliography, https://dblp.org}
}



@book{Barendregt1984,
author = {Hendrik Barendregt},
editor = {John Bairwise},
title = {The Lambda Calculus: Its Syntax and Semantics},
publisher = {Elsevier Science Pub. Co.},
series = {Studies in Logic and the Foundations of Mathematics},
volume = {103},
year = {1984}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 	IMPLEMENTATION CYCLIC PROOFS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% It works fast on realistic examples. This counter-balances the negative 
% impression produced by the PSPACE-completeness of the algorithm.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@inproceedings{10.1007/978-3-642-35182-2_25,
author="James Brotherston and Nikos Gorogiannis and Rasmus Petersen",
editor="Jhala, Ranjit and Igarashi, Atsushi",
title="A Generic Cyclic Theorem Prover",
booktitle="Programming Languages and Systems",
year="2012",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="350--367",
isbn="978-3-642-35182-2"
}

@inproceedings{10.1145/3018610.3018623,
author = {Rowe, Reuben N. S. and Brotherston, James},
title = {Automatic cyclic termination proofs for recursive procedures in separation logic},
year = {2017},
isbn = {9781450347051},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3018610.3018623},
doi = {10.1145/3018610.3018623},
abstract = {We describe a formal verification framework and tool implementation, based upon cyclic proofs, for certifying the safe termination of imperative pointer programs with recursive procedures. Our assertions are symbolic heaps in separation logic with user defined inductive predicates; we employ explicit approximations of these predicates as our termination measures. This enables us to extend cyclic proof to programs with procedures by relating these measures across the pre- and postconditions of procedure calls. We provide an implementation of our formal proof system in the Cyclist theorem proving framework, and evaluate its performance on a range of examples drawn from the literature on program termination. Our implementation extends the current state-of-the-art in cyclic proof-based program verification, enabling automatic termination proofs of a larger set of programs than previously possible.},
booktitle = {Proceedings of the 6th ACM SIGPLAN Conference on Certified Programs and Proofs},
pages = {53–65},
numpages = {13},
keywords = {Termination, Separation logic, Proof Certificates, Imperative programming, Explicit approximation, Cyclic proof, Automated proof search},
location = {Paris, France},
series = {CPP 2017}
}

@article{10.1145/3632888,
author = {Cohen, Liron and Jabarin, Adham and Popescu, Andrei and Rowe, Reuben N. S.},
title = {The Complex(ity) Landscape of Checking Infinite Descent},
year = {2024},
issue_date = {January 2024},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {8},
number = {POPL},
url = {https://doi.org/10.1145/3632888},
doi = {10.1145/3632888},
abstract = {Cyclic proof systems, in which induction is managed implicitly, are a promising approach to automatic verification. The soundness of cyclic proof graphs is ensured by checking them against a trace-based Infinite Descent property. Although the problem of checking Infinite Descent is known to be PSPACE-complete, this leaves much room for variation in practice. Indeed, a number of different approaches are employed across the various cyclic proof systems described in the literature. In this paper, we study criteria for Infinite Descent in an abstract, logic-independent setting. We look at criteria based on B\"{u}chi automata encodings and relational abstractions, and determine their parameterized time complexities in terms of natural dimensions of cyclic proofs: the numbers of vertices of the proof-tree graphs, and the vertex width—an upper bound on the number of components (e.g., formulas) of a sequent that can be simultaneously tracked for descent. We identify novel algorithms that improve upon the parameterised complexity of the existing algorithms. We implement the studied criteria and compare their performance on various benchmarks.},
journal = {Proc. ACM Program. Lang.},
month = jan,
articleno = {46},
numpages = {33},
keywords = {cyclic proof, infinite descent, size-change termination, complexity, algorithms, B\"{u}chi automata}
}

@InProceedings{10.1007/978-3-031-90643-5_18,
author="Cohen, Liron
and Rowe, Reuben N. S.
and Shaked, Matan",
editor="Gurfinkel, Arie
and Heule, Marijn",
title="Cyclone: A Heterogeneous Tool for Verifying Infinite Descent",
booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
year="2025",
publisher="Springer Nature Switzerland",
address="Cham",
pages="336--354",
abstract="The Infinite Descent property underpins key verification techniques, such as size-change program termination and cyclic proofs. Deciding whether the Infinite Descent property holds of a given program or cyclic deduction is PSPACE-complete, with several exponential time algorithms in the literature. In this paper, we consider algorithms with better time complexity but which are (necessarily) incomplete. Concretely, we formulate and evaluate a number of alternative algorithms for semi-deciding Infinite Descent. Our aim is to improve average runtime performance by utilising more efficient algorithms for specific subclasses of input. We present Cyclone, a tool integrating these algorithms with an existing (complete) decision procedure. We evaluate Cyclone on a large suite of examples harvested from the Cyclist theorem prover, finding that the incomplete algorithms achieve extremely high coverage and afford substantial runtime improvement in practice. We thus believe that the Cyclone tool will foster broader adoption of techniques based on Infinite Descent and expand their practical applications.",
isbn="978-3-031-90643-5"
}

@inproceedings{10.1145/3453483.3454087,
author = {Itzhaky, Shachar and Peleg, Hila and Polikarpova, Nadia and Rowe, Reuben N. S. and Sergey, Ilya},
title = {Cyclic program synthesis},
year = {2021},
isbn = {9781450383912},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3453483.3454087},
doi = {10.1145/3453483.3454087},
abstract = {We describe the first approach to automatically synthesizing heap-manipulating programs with auxiliary recursive procedures. Such procedures occur routinely in data structure transformations (e.g., flattening a tree into a list) or traversals of composite structures (e.g., n-ary trees). Our approach, dubbed cyclic program synthesis, enhances deductive program synthesis with a novel application of cyclic proofs. Specifically, we observe that the machinery used to form cycles in cyclic proofs can be reused to systematically and efficiently abduce recursive auxiliary procedures. We develop the theory of cyclic program synthesis by extending Synthetic Separation Logic (SSL), a logical framework for deductive synthesis of heap-manipulating programs from Separation Logic specifications. We implement our approach as a tool called Cypress, and showcase it by automatically synthesizing a number of programs manipulating linked data structures using recursive auxiliary procedures and mutual recursion, many of which were beyond the reach of existing program synthesis tools.},
booktitle = {Proceedings of the 42nd ACM SIGPLAN International Conference on Programming Language Design and Implementation},
pages = {944–959},
numpages = {16},
keywords = {Separation Logic, Program Synthesis, Cyclic Proofs},
location = {Virtual, Canada},
series = {PLDI 2021}
}

@article{Brotherston2020,
author = {Tellez, G. and Brotherston J.},
title = {Automatically Verifying Temporal Properties of Pointer Programs with Cyclic Proof}, 
journal = {J. Autom. Reason. 64(3)},
pages = {555-57},
year = {2020},
doi = {https://doi.org/10.1007/s10817-019-09532-0}
}

@article{Stratulat_2021,
   title={E-Cyclist: Implementation of an Efficient Validation of FOLID Cyclic Induction Reasoning},
   volume={342},
   ISSN={2075-2180},
   url={http://dx.doi.org/10.4204/EPTCS.342.11},
   DOI={10.4204/eptcs.342.11},
   journal={Electronic Proceedings in Theoretical Computer Science},
   publisher={Open Publishing Association},
   author={Stratulat, Sorin},
   year={2021},
   month=sep, pages={129–135} }



